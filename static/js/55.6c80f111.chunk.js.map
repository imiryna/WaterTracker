{"version":3,"file":"static/js/55.6c80f111.chunk.js","mappings":"0IAEO,MAAMA,E,OAAUC,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+E,+cCU1B,MAAMC,EAAcH,EAAAA,QAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+bAKXE,E,q/TAGEC,EAAsBC,EAMtBC,EAAsBC,GAMrCC,EAAUT,EAAAA,QAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,iWAqBpBS,EAAiBX,EAAAA,QAAAA,KAAWY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,yEAO5BW,EAAWb,EAAAA,QAAAA,GAASc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,2IAQpBa,EAAWf,EAAAA,QAAAA,IAAUgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,qMAYrBe,EAAcjB,EAAAA,QAAAA,MAAYkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,kfAkC1BiB,EAAgBnB,EAAAA,QAAAA,IAAUoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,qJAa1BmB,GAAerB,EAAAA,EAAAA,SAAOsB,EAAAA,EAAPtB,CAAgBuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,+DAM/BsB,GAAexB,EAAAA,EAAAA,SAAOyB,EAAAA,EAAPzB,CAAgB0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,+DAO/ByB,EAAa3B,EAAAA,QAAAA,OAAa4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,mlBAiC1B2B,EAAgB7B,EAAAA,QAAAA,IAAU8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,iJAU1B6B,GAAiB/B,EAAAA,EAAAA,SAAOgC,EAAAA,GAAPhC,CAAeiC,IAAAA,GAAA/B,EAAAA,EAAAA,GAAA,6KAYhCgC,EAASlC,EAAAA,QAAAA,IAAUmC,IAAAA,GAAAjC,EAAAA,EAAAA,GAAA,qMAenBkC,EAAapC,EAAAA,QAAAA,OAAaqC,IAAAA,GAAAnC,EAAAA,EAAAA,GAAA,iI,mLCtLvC,MAAMoC,EAAmBC,EAAAA,GAAW,CAClCC,SAAUD,EAAAA,GAAW,uBAClBE,IAAI,EAAG,qDACPC,IAAI,GAAI,sDACRC,SAAS,wBACZC,eAAgBL,EAAAA,GAAW,uBACxBM,MAAM,CAACN,EAAAA,GAAQ,YAAa,MAAO,wBACnCI,SAAS,0BA8Id,EA3ImCG,KAElC,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,KACvBC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAC1CC,EAAkBC,IAA2BF,EAAAA,EAAAA,WAAS,GAGtDG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbrB,SAAU,GACVI,eAAgB,IAGlBN,iBAAkBA,EAClBwB,SAAUC,UACR,UACQhB,GACJiB,EAAAA,EAAAA,IAAoB,CAClBC,eACAzB,SAAU,CAAEA,SAAU0B,EAAO1B,aAIjCiB,IACAE,EAAOQ,aACPC,EAAAA,EAAAA,IAAS,UAGX,CAFE,MAAOC,GACPd,GAAgB,EAClB,KAKEe,EAAMC,OAAOC,SAASC,KAItBR,EAHY,IAAIS,IAAIJ,GACCK,OACFC,MAAM,KACF,IAEtBC,EAAcC,IAAmBtB,EAAAA,EAAAA,WAAS,IAC1CuB,EAAoBC,IAAyBxB,EAAAA,EAAAA,WAAS,GAEvDyB,EAAsBA,KAC1B1B,GAAgB,EAAM,EAOxB,OAAIN,GACKiC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,YAGfhC,GACH8B,EAAAA,EAAAA,KAACnF,EAAAA,EAAO,KAEVsF,EAAAA,EAAAA,MAAC5E,EAAAA,GAAO,CAAA6E,SAAA,EACND,EAAAA,EAAAA,MAAC1E,EAAAA,GAAc,CAACmD,SAAUH,EAAO4B,aAAaD,SAAA,EAC5CJ,EAAAA,EAAAA,KAACrE,EAAAA,GAAQ,CAAAyE,SAAC,oBACVD,EAAAA,EAAAA,MAACtE,EAAAA,GAAQ,CAAAuE,SAAA,EACPJ,EAAAA,EAAAA,KAAA,SAAOM,QAAQ,WAAUF,SAAC,6BAC1BD,EAAAA,EAAAA,MAAClE,EAAAA,GAAa,CAAAmE,SAAA,EACXJ,EAAAA,EAAAA,KAACjE,EAAAA,GAAW,CACbwE,GAAG,WACHC,KAAK,WACLC,KAAMd,EAAe,OAAS,WAC9Be,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOO,OAAO1B,SACrBuD,YAAY,WACZC,UAAWrC,EAAOsC,OAAOzD,UAAYmB,EAAOuC,QAAQ1D,SAAW,QAAU,MAGzE0C,EAAAA,EAAAA,KAAC9C,EAAAA,GAAU,CACTuD,KAAK,SACLQ,QAASA,IAAMrB,GAAiBD,GAAcS,SAE7CT,GAAeK,EAAAA,EAAAA,KAAC7D,EAAAA,GAAY,KAAM6D,EAAAA,EAAAA,KAAC1D,EAAAA,GAAY,SAGnDmC,EAAOsC,OAAOzD,UAAYmB,EAAOuC,QAAQ1D,UACxC0C,EAAAA,EAAAA,KAACrD,EAAAA,GAAa,CAAAyD,SAAE3B,EAAOsC,OAAOzD,WAC5B,SAGN6C,EAAAA,EAAAA,MAACtE,EAAAA,GAAQ,CAAAuE,SAAA,EACPJ,EAAAA,EAAAA,KAAA,SAAOM,QAAQ,iBAAgBF,SAAC,0BAChCD,EAAAA,EAAAA,MAAClE,EAAAA,GAAa,CAAAmE,SAAA,EACXJ,EAAAA,EAAAA,KAACjE,EAAAA,GAAW,CACbwE,GAAG,iBACHC,KAAK,iBACLC,KAAMZ,EAAqB,OAAS,WACpCa,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOO,OAAOtB,eACrBmD,YAAY,kBACZC,UAAWrC,EAAOsC,OAAOzD,UAAYmB,EAAOuC,QAAQ1D,SAAW,QAAU,MAG3E0C,EAAAA,EAAAA,KAAC9C,EAAAA,GAAU,CACPuD,KAAK,SACLQ,QAASA,IAAMnB,GAAuBD,GAAoBO,SAEzDP,GAAqBG,EAAAA,EAAAA,KAAC7D,EAAAA,GAAY,KAAM6D,EAAAA,EAAAA,KAAC1D,EAAAA,GAAY,SAIzDmC,EAAOsC,OAAOrD,gBAAkBe,EAAOuC,QAAQtD,gBAC9CsC,EAAAA,EAAAA,KAACrD,EAAAA,GAAa,CAAAyD,SAAE3B,EAAOsC,OAAOrD,iBAC5B,SAGNsC,EAAAA,EAAAA,KAACvD,EAAAA,GAAU,CAACgE,KAAK,SAAQL,SAAC,oBAC1BJ,EAAAA,EAAAA,KAACnD,EAAAA,GAAc,CAACqD,GAAG,UAASE,SAAC,gBAE/BJ,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CACPC,KAAM/C,EACNgD,iBAAkB,IAClBC,QAAStB,EACTuB,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAAUpB,UAEvDJ,EAAAA,EAAAA,KAACyB,EAAAA,EAAK,CAACJ,QAAStB,EAAqB2B,SAAS,QAAOtB,SAAC,8CAIxDJ,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CACPC,KAAM5C,EACN6C,iBAAkB,IAClBE,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CH,QAlF0BM,KAC9BnD,GAAwB,EAAM,EAkF1BoD,QAAQ,wBAIF,ECnKd,EANuBC,KACZ7B,EAAAA,EAAAA,KAAC/E,EAAAA,GAAW,CAAAmF,UACfJ,EAAAA,EAAAA,KAACpC,EAAkB,K","sources":["components/Loader/Loader.styled.js","components/SignIn/SignIn.styled.js","components/UpdatePassword/UpdatePassword.jsx","pages/UpdatePasswordPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from 'styled-components';\nimport BottleImgDes from 'Images/Backgrounds/bottle-sign-in.png';\nimport BottleImgTab from 'Images/Backgrounds/bottle-sign-in-tablet.png';\nimport BottleImgMob from 'Images/Backgrounds/bottle-sign-in-mobile.png'\nimport BubblesDes from 'Images/Backgrounds/background-bubbles-main-page.png';\nimport BubblesTab from 'Images/Backgrounds/background-bubbles-main-page-tablet.png';\nimport BubblesMob from 'Images/Backgrounds/background-bubbles-main-page-mobile.png'\nimport {ReactComponent as ShowPass} from \"Images/Icons/show-pass.svg\";\nimport {ReactComponent as HidePass} from \"Images/Icons/hide-pass.svg\";\nimport { NavLink } from 'react-router-dom';\n\n\nexport const AuthPageDiv = styled.div`\n  background-color: #fff;\n  background-repeat: no-repeat;\n  background-position: center bottom;\n  height:680px;\n  background-image: url(${BottleImgMob}), url(${BubblesMob});\n\n  @media (min-width: 768px) {\n    background-image: url(${BottleImgTab}), url(${BubblesTab});\n    background-position: right bottom;\n    width: 768px;\n  }\n\n  @media (min-width: 1440px) {\n    background-image: url(${BottleImgDes}), url(${BubblesDes});\n    background-position: left bottom;\n    width: 1440px;\n  }\n`;\n\nexport const AuthDiv = styled.div`\n  padding-top: 80px;\n  padding-left: 20px;\n  padding-right: 20px;\n\n\n  @media (min-width: 768px) {\n    padding-top: 104px;\n    padding-left: 32px;\n    padding-right: 400px;\n    width: 768px;\n  }\n\n  @media (min-width: 1440px) {\n    padding-top: 222px;\n    padding-right: 18px;\n    padding-left: 840px;\n    width: 1440px;\n  }\n\n`;\nexport const AuthStyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  \n`;\n\nexport const FormName = styled.h2`\n  color: #2f2f2f;\n  font-family: Roboto;\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 32px;\n`;\nexport const InputDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: #2F2F2F;\n  font-family: Roboto;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 24px;\n`;\n\nexport const StyledInput = styled.input`\n  width: 280px;\n  padding: 12px 30px 12px 10px; \n  border-radius: 6px;\n  border: 1px solid #D7E3FF;\n  background: #FFF;\n  transition: border-color 0.3s;\n  color: #407BFF;\n\n  &:focus {\n    outline: none;\n    border-color: #D7E3FF;\n  }\n\n  &::placeholder {\n    color: #9EBBFF;\n  }\n\n  &.error {\n    border: 1px solid #EF5050;\n    color: #EF5050;\n  }\n\n  \n\n  @media (min-width: 768px) {\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`;\n\nexport const IconContainer = styled.div`\nposition: relative;\nwidth: 280px;\n\n@media (min-width: 768px) {\n  width: 336px;\n}\n\n@media (min-width: 1440px) {\n  width: 384px;\n}\n`;\n\nexport const ShowPassIcon = styled(ShowPass)`\n  width: 16px;\n  height: 16px;\n  stroke: #407BFF;\n`;\n\nexport const HidePassIcon = styled(HidePass)`\n  width: 16px;\n  height: 16px;\n  stroke: #407BFF;\n`;\n\n\nexport const FormButton = styled.button`\n  padding: 10px 30px;\n  border-radius: 10px;\n  background: #407bff;\n  box-shadow: 0px 4px 8px 0px rgba(64, 123, 255, 0.34);\n  width: 280px;\n  color: #fff;\n  text-align: center;\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 20px;\n  letter-spacing: 0%;\n  text-align: center;\n\n  &:hover {\n    box-shadow: 0px 4px 14px 0px rgba(64, 123, 255, 0.54);\n  }\n\n\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`;\n\nexport const AuthDataError = styled.div`\ncolor: #EF5050;\nfont-family: Roboto;\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 18px;\nmargin-top: 4px;\n`\n\nexport const RedirectButton = styled(NavLink)`\ncolor: #407BFF;\nfont-family: Roboto;\nfont-size: 16px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 20px; \n\n&:hover {\n  color: rgb(255, 157, 67);\n}\n`\nexport const NavDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 280px;\n\n\n  @media (min-width: 768px) {\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`\n\nexport const ButtonIcon = styled.button`\nposition: absolute;\nright: 10px;\ntop: 50%;\ntransform: translateY(-50%);\ncursor: pointer;\nbackground: transparent;\n`\n\n\n","import React, { useState } from 'react';\nimport { Navigate, redirect } from 'react-router-dom';\nimport {\n  AuthStyledForm,\n  AuthDiv,\n  FormName,\n  InputDiv,\n  StyledInput,\n  FormButton,\n  AuthDataError,\n  IconContainer,\n  RedirectButton,\n  ButtonIcon,\n  ShowPassIcon,\n  HidePassIcon,\n} from '../SignIn/SignIn.styled';\nimport {\n  selectAuthAuthenticated,\n  selectAuthIsLoading,\n} from 'Store/auth/authSelector';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { updatePasswordThunk } from 'Store/auth/authOperations';\nimport { Loading } from 'components/Loader/Loader.styled';\n\nconst validationSchema = Yup.object({\n  password: Yup.string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .max(64, 'Password should be of maximum 64 characters length')\n    .required('Password is required'),\n  repeatPassword: Yup.string('Enter your password')\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Password is required'),\n});\n\n export const UpdatePasswordForm = () => {\n\n const dispatch = useDispatch();\n const isAuthenticated = useSelector(selectAuthAuthenticated);\n const isLoading = useSelector(selectAuthIsLoading);\n const [openSnackbar, setOpenSnackbar] = useState(false);\n const [openConfirmation, setOpenOpenConfirmation] = useState(false);\n\n\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      repeatPassword: '',\n    },\n\n    validationSchema: validationSchema,\n    onSubmit: async values => {\n      try {\n        await dispatch(\n          updatePasswordThunk({\n            restoreToken,\n            password: { password: values.password }\n            \n          })\n        );\n        openConfirmation()\n        formik.resetForm();\n        redirect('/signin');\n      } catch (error) {\n        setOpenSnackbar(true);\n      }\n    },\n  });\n\n  //  get token\n  const url = window.location.href;\n  const urlObject = new URL(url);\n  const pathname = urlObject.search;\n  const segment = pathname.split('=');\n  const restoreToken = segment[1];\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRepeatPassword, setShowRepeatPassword] = useState(false);\n\n  const handleCloseSnackbar = () => {\n    setOpenSnackbar(false);\n  };\n\n  const handleCloseConfirmation = () => {\n    setOpenOpenConfirmation(false);\n  }\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/signin\" />;\n  }\n\n  return isLoading \n    ? <Loading/> \n    :\n    <AuthDiv>\n      <AuthStyledForm onSubmit={formik.handleSubmit}>\n        <FormName>Reset password</FormName>\n        <InputDiv>\n          <label htmlFor=\"password\">Enter your new password</label>\n          <IconContainer>\n             <StyledInput\n            id=\"password\"\n            name=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            placeholder=\"Password\"\n            className={formik.errors.password && formik.touched.password ? 'error' : ''}\n          />\n          \n            <ButtonIcon\n              type=\"button\" \n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? <ShowPassIcon /> : <HidePassIcon />}\n            </ButtonIcon>\n          </IconContainer>\n          {formik.errors.password && formik.touched.password ? (\n            <AuthDataError>{formik.errors.password}</AuthDataError>\n          ) : null}\n        </InputDiv>\n\n        <InputDiv>\n          <label htmlFor=\"repeatPassword\">Repeat your password</label>\n          <IconContainer>\n             <StyledInput\n            id=\"repeatPassword\"\n            name=\"repeatPassword\"\n            type={showRepeatPassword ? 'text' : 'password'}\n            onChange={formik.handleChange}\n            value={formik.values.repeatPassword}\n            placeholder=\"Repeat password\"\n            className={formik.errors.password && formik.touched.password ? 'error' : ''}\n          />\n          \n          <ButtonIcon\n              type=\"button\" \n              onClick={() => setShowRepeatPassword(!showRepeatPassword)}\n            >\n              {showRepeatPassword ? <ShowPassIcon /> : <HidePassIcon />}\n            </ButtonIcon>\n\n          </IconContainer>\n          {formik.errors.repeatPassword && formik.touched.repeatPassword ? (\n            <AuthDataError>{formik.errors.repeatPassword}</AuthDataError>\n          ) : null}\n        </InputDiv>\n\n        <FormButton type=\"submit\">Reset password</FormButton>\n        <RedirectButton to=\"/signin\">Sign In</RedirectButton>\n      </AuthStyledForm>\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert onClose={handleCloseSnackbar} severity=\"error\">\n          Fill the fields to reset your password\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={openConfirmation}\n        autoHideDuration={6000}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        onClose={handleCloseConfirmation}\n        message=\"Password updated!\"\n        >\n\n        </Snackbar>\n    </AuthDiv>\n  ;\n};\n\nexport default UpdatePasswordForm;\n","import React from \"react\";\nimport { AuthPageDiv } from \"components/SignIn/SignIn.styled\";\nimport UpdatePasswordForm from \"components/UpdatePassword/UpdatePassword\";\n\nconst UpdatePassword = () => {\n    return <AuthPageDiv>\n        <UpdatePasswordForm/>\n    </AuthPageDiv>\n};\n\nexport default UpdatePassword;"],"names":["Loading","styled","_templateObject","_taggedTemplateLiteral","AuthPageDiv","BottleImgMob","BottleImgTab","BubblesTab","BottleImgDes","BubblesDes","AuthDiv","_templateObject2","AuthStyledForm","_templateObject3","FormName","_templateObject4","InputDiv","_templateObject5","StyledInput","_templateObject6","IconContainer","_templateObject7","ShowPassIcon","ShowPass","_templateObject8","HidePassIcon","HidePass","_templateObject9","FormButton","_templateObject10","AuthDataError","_templateObject11","RedirectButton","NavLink","_templateObject12","NavDiv","_templateObject13","ButtonIcon","_templateObject14","validationSchema","Yup","password","min","max","required","repeatPassword","oneOf","UpdatePasswordForm","dispatch","useDispatch","isAuthenticated","useSelector","selectAuthAuthenticated","isLoading","selectAuthIsLoading","openSnackbar","setOpenSnackbar","useState","openConfirmation","setOpenOpenConfirmation","formik","useFormik","initialValues","onSubmit","async","updatePasswordThunk","restoreToken","values","resetForm","redirect","error","url","window","location","href","URL","search","split","showPassword","setShowPassword","showRepeatPassword","setShowRepeatPassword","handleCloseSnackbar","_jsx","Navigate","to","_jsxs","children","handleSubmit","htmlFor","id","name","type","onChange","handleChange","value","placeholder","className","errors","touched","onClick","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","handleCloseConfirmation","message","UpdatePassword"],"sourceRoot":""}