{"version":3,"file":"static/js/896.c6c47997.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/SignIn/SignIn.styled.js","components/ForgotPassword/ForgotPassword.jsx","pages/ForgotPasswordPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from 'styled-components';\nimport BottleImgDes from 'Images/Backgrounds/bottle-sign-in.png';\nimport BottleImgTab from 'Images/Backgrounds/bottle-sign-in-tablet.png';\nimport BottleImgMob from 'Images/Backgrounds/bottle-sign-in-mobile.png'\nimport BubblesDes from 'Images/Backgrounds/background-bubbles-main-page.png';\nimport BubblesTab from 'Images/Backgrounds/background-bubbles-main-page-tablet.png';\nimport BubblesMob from 'Images/Backgrounds/background-bubbles-main-page-mobile.png'\nimport {ReactComponent as ShowPass} from \"Images/Icons/show-pass.svg\";\nimport {ReactComponent as HidePass} from \"Images/Icons/hide-pass.svg\";\nimport { NavLink } from 'react-router-dom';\n\n\nexport const AuthPageDiv = styled.div`\n  background-color: #fff;\n  background-repeat: no-repeat;\n  background-position: center bottom;\n  height:680px;\n  background-image: url(${BottleImgMob}), url(${BubblesMob});\n\n  @media (min-width: 768px) {\n    background-image: url(${BottleImgTab}), url(${BubblesTab});\n    background-position: right bottom;\n    width: 768px;\n  }\n\n  @media (min-width: 1440px) {\n    background-image: url(${BottleImgDes}), url(${BubblesDes});\n    background-position: left bottom;\n    width: 1440px;\n  }\n`;\n\nexport const AuthDiv = styled.div`\n  padding-top: 80px;\n  padding-left: 20px;\n  padding-right: 20px;\n\n\n  @media (min-width: 768px) {\n    padding-top: 104px;\n    padding-left: 32px;\n    padding-right: 400px;\n    width: 768px;\n  }\n\n  @media (min-width: 1440px) {\n    padding-top: 222px;\n    padding-right: 18px;\n    padding-left: 840px;\n    width: 1440px;\n  }\n\n`;\nexport const AuthStyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  \n`;\n\nexport const FormName = styled.h2`\n  color: #2f2f2f;\n  font-family: Roboto;\n  font-size: 26px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 32px;\n`;\nexport const InputDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: #2F2F2F;\n  font-family: Roboto;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 24px;\n`;\n\nexport const StyledInput = styled.input`\n  width: 280px;\n  padding: 12px 30px 12px 10px; \n  border-radius: 6px;\n  border: 1px solid #D7E3FF;\n  background: #FFF;\n  transition: border-color 0.3s;\n  color: #407BFF;\n\n  &:focus {\n    outline: none;\n    border-color: #D7E3FF;\n  }\n\n  &::placeholder {\n    color: #9EBBFF;\n  }\n\n  &.error {\n    border: 1px solid #EF5050;\n    color: #EF5050;\n  }\n\n  \n\n  @media (min-width: 768px) {\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`;\n\nexport const IconContainer = styled.div`\nposition: relative;\nwidth: 280px;\n\n@media (min-width: 768px) {\n  width: 336px;\n}\n\n@media (min-width: 1440px) {\n  width: 384px;\n}\n`;\n\nexport const ShowPassIcon = styled(ShowPass)`\n  width: 16px;\n  height: 16px;\n  stroke: #407BFF;\n`;\n\nexport const HidePassIcon = styled(HidePass)`\n  width: 16px;\n  height: 16px;\n  stroke: #407BFF;\n`;\n\n\nexport const FormButton = styled.button`\n  padding: 10px 30px;\n  border-radius: 10px;\n  background: #407bff;\n  box-shadow: 0px 4px 8px 0px rgba(64, 123, 255, 0.34);\n  width: 280px;\n  color: #fff;\n  text-align: center;\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 20px;\n  letter-spacing: 0%;\n  text-align: center;\n\n  &:hover {\n    box-shadow: 0px 4px 14px 0px rgba(64, 123, 255, 0.54);\n  }\n\n\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`;\n\nexport const AuthDataError = styled.div`\ncolor: #EF5050;\nfont-family: Roboto;\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 18px;\nmargin-top: 4px;\n`\n\nexport const RedirectButton = styled(NavLink)`\ncolor: #407BFF;\nfont-family: Roboto;\nfont-size: 16px;\nfont-style: normal;\nfont-weight: 400;\nline-height: 20px; \n\n&:hover {\n  color: rgb(255, 157, 67);\n}\n`\nexport const NavDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 280px;\n\n\n  @media (min-width: 768px) {\n    width: 336px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 384px;\n  }\n`\n\nexport const ButtonIcon = styled.button`\nposition: absolute;\nright: 10px;\ntop: 50%;\ntransform: translateY(-50%);\ncursor: pointer;\nbackground: transparent;\n`\n\n\n","import React, {useState, useEffect} from 'react';\nimport { Navigate} from 'react-router-dom';\nimport { AuthStyledForm, AuthDiv, FormName, InputDiv, StyledInput, FormButton, AuthDataError, RedirectButton } from '../SignIn/SignIn.styled';\nimport { selectAuthError, selectAuthAuthenticated, selectAuthIsLoading } from 'Store/auth/authSelector';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from \"yup\";\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { forgotPasswordThunk } from 'Store/auth/authOperations';\nimport { Loading } from 'components/Loader/Loader.styled';\n\n const validationSchema = Yup.object({\n  email: Yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required')\n});\n\n export const ForgotPasswordForm = () => {\n  const isLoading = useSelector(selectAuthIsLoading);\n const dispatch = useDispatch();\n const authError = useSelector(selectAuthError);\n const isAuthenticated = useSelector(selectAuthAuthenticated);\n\n const [openSnackbar, setOpenSnackbar] = useState(false);\n const [openConfirmation, setOpenOpenConfirmation] = useState(false);\n\n\n   const formik = useFormik({\n     initialValues: {\n       email: ''\n      },\n      \n      validationSchema: validationSchema,\n\n      onSubmit: async (values) => {\n        try {\n          await dispatch(forgotPasswordThunk({email: values.email}));\n          setOpenOpenConfirmation(true);\n          formik.resetForm();\n        } catch (error) {\n          setOpenSnackbar(true);\n        }\n      }\n   });\n\n\n   useEffect(() => {\n    if (authError) {\n      setOpenSnackbar(true);\n    }\n  }, [authError]);\n\n  const handleCloseSnackbar = () => {\n    setOpenSnackbar(false);\n  };\n\n  const handleCloseConfirmation = () => {\n    setOpenOpenConfirmation(false);\n  }\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/home\" />;\n  }\n\n   return isLoading ? \n   <Loading/>\n   :\n    <AuthDiv>\n\n     <AuthStyledForm onSubmit={formik.handleSubmit}>\n        <FormName>Forgot password</FormName>\n        <InputDiv>\n            <label htmlFor=\"email\">Enter your email and we'll send a link to reset your password</label>\n            <StyledInput\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                placeholder='E-mail'\n            />\n            {formik.errors.email && formik.touched.email ? <AuthDataError>{formik.errors.email}</AuthDataError> : null} \n        </InputDiv>\n\n\n       <FormButton type=\"submit\">Send</FormButton>\n       <RedirectButton to=\"/signin\">Sign In</RedirectButton>\n     </AuthStyledForm>\n     <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar } anchorOrigin={{ vertical: 'top', horizontal: 'right' }}>\n          <Alert onClose={handleCloseSnackbar} severity=\"error\">\n            Please, enter your email\n          </Alert>\n        </Snackbar>\n        <Snackbar\n        open={openConfirmation}\n        autoHideDuration={6000}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        onClose={handleCloseConfirmation}\n        message=\"Check Your email!\"\n        >\n\n        </Snackbar>\n     </AuthDiv>\n   ;\n };\n\nexport default ForgotPasswordForm;","import React from \"react\";\nimport { AuthPageDiv } from \"components/SignIn/SignIn.styled\";\nimport { ForgotPasswordForm } from \"components/ForgotPassword/ForgotPassword\";\n\nconst ForgotPassword = () => {\n    return <AuthPageDiv>\n        <ForgotPasswordForm/>\n    </AuthPageDiv>\n};\n\nexport default ForgotPassword;"],"names":["Loading","styled","_templateObject","_taggedTemplateLiteral","AuthPageDiv","BottleImgMob","BottleImgTab","BubblesTab","BottleImgDes","BubblesDes","AuthDiv","_templateObject2","AuthStyledForm","_templateObject3","FormName","_templateObject4","InputDiv","_templateObject5","StyledInput","_templateObject6","IconContainer","_templateObject7","ShowPassIcon","ShowPass","_templateObject8","HidePassIcon","HidePass","_templateObject9","FormButton","_templateObject10","AuthDataError","_templateObject11","RedirectButton","NavLink","_templateObject12","NavDiv","_templateObject13","ButtonIcon","_templateObject14","validationSchema","Yup","email","required","ForgotPasswordForm","isLoading","useSelector","selectAuthIsLoading","dispatch","useDispatch","authError","selectAuthError","isAuthenticated","selectAuthAuthenticated","openSnackbar","setOpenSnackbar","useState","openConfirmation","setOpenOpenConfirmation","formik","useFormik","initialValues","onSubmit","async","forgotPasswordThunk","values","resetForm","error","useEffect","handleCloseSnackbar","_jsx","Navigate","to","_jsxs","children","handleSubmit","htmlFor","id","name","type","onChange","handleChange","value","placeholder","errors","touched","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","handleCloseConfirmation","message","ForgotPassword"],"sourceRoot":""}